"use strict";(self.webpackJsonp=self.webpackJsonp||[]).push([[116],{662:function(e,r,s){s.r(r);var t=s(30),n=s(4),i=s(88),u=s(51),a=s(41),c=s(24),o=s(120),d=s(411),g=new u.a("preKeyDigest",e=>{var r=e.child("digest"),s=r.child("list").mapChildrenWithTag("id",e=>e.contentUint(3)),t=r.child("skey").child("id").contentUint(3);return{regId:r.child("registration").contentUint(4),type:r.child("type").contentUint(1),skeyId:t,preKeyIds:s,hash:r.child("hash").contentBytes(20)}});function y(e,r){return e.id-r.id}r.default=(0,i.c)().finalStep("requestPreKeyDigest",()=>{var e=(0,n.w)("iq",{xmlns:"encrypt",type:"get",to:n.l,id:(0,n.u)()},(0,n.w)("digest",null));return(0,t.b)(e,g).then(e=>{if(!e.success)throw __LOG__(4)`Error while requesting prekey digest`,new Error("Error while requesting prekey digest");var r=e.result;return(0,a.K)(r.preKeyIds).then(e=>{var s=e.regId,t=e.staticPublicKey,n=e.signedPreKey,i=e.preKeys;if(s!==r.regId)return{success:!1,reason:"RegId"};if(n.id!==r.skeyId)return{success:!1,reason:"SignedPreKeyId"};var u=new Set;return i.forEach(e=>{var r=e.id;u.add(r)}),r.preKeyIds.some(e=>!u.has(e))?{success:!1,reason:"UnknownPreKey"}:(function(e,r,s,t){var n=new c.a;return n.writeByteArray(r),n.writeByteArray(s.keyPair.publicKey),n.writeByteArray(s.signature),t.sort(y).forEach(e=>{n.writeByteArray(e.keyPair.publicKey)}),self.crypto.subtle.digest("SHA-1",n.readByteArray()).then(e=>new Uint8Array(e))})(0,t,n,i).then(e=>(0,o.c)(e,r.hash)?{success:!0}:{success:!1,reason:"HashMismatch"})}).then(e=>{if(!e.success)return __LOG__(2)`Digest comparison failed ${e.reason}`,(0,d.default)()})})}).end()}}]);